{"ast":null,"code":"const minLng = -71.6; // Minimum longitude\nconst maxLng = -71.54; // Maximum longitude\nconst minLat = -33.03; // Minimum latitude\nconst maxLat = -33.01; // Maximum latitude\n\nexport const addressPoints = [[-71.54599734634539, -33.01803121323585, Math.floor(Math.random() * 501) + 500], [-71.54465164766788, -33.01825654780948, Math.floor(Math.random() * 501) + 500], [-71.54641489353811, -33.01875922833267, Math.floor(Math.random() * 501) + 500], [-71.54669701287752, -33.01935061351519, Math.floor(Math.random() * 501) + 500], [-71.54888343775589, -33.01018369743598, Math.floor(Math.random() * 501) + 500], [-71.54652068829031, -33.01047941928122, Math.floor(Math.random() * 501) + 500], [-71.5496240010213, -33.011130003849814, Math.floor(Math.random() * 501) + 500], [-71.5468028076297, -33.01145529433382, Math.floor(Math.random() * 501) + 500], [-71.5477902253167, -33.0105089914115, Math.floor(Math.random() * 501) + 500], [-71.58026944908603, -33.02963671705373, Math.floor(Math.random() * 501) + 500], [-71.5717410066938, -33.02865048394356, Math.floor(Math.random() * 501) + 500], [-71.57041762770187, -33.027540958502065, Math.floor(Math.random() * 501) + 500], [-71.57056466981253, -33.02803408264416, Math.floor(Math.random() * 501) + 500], [-71.5713734014185, -33.02809572296883, Math.floor(Math.random() * 501) + 500], ...Array.from({\n  length: 1000\n}, () => [Math.random() * (maxLng - minLng) + minLng,\n// Random longitude between minLng and maxLng\nMath.random() * (maxLat - minLat) + minLat,\n// Random latitude between minLat and maxLat\nMath.floor(Math.random() * 501) + 500 // Random value between 500 and 1000\n])];","map":{"version":3,"names":["minLng","maxLng","minLat","maxLat","addressPoints","Math","floor","random","Array","from","length"],"sources":["/Users/agusghent/Desktop/testing-geodata/leaflet-app/src/addressPoints.js"],"sourcesContent":["const minLng = -71.6; // Minimum longitude\nconst maxLng = -71.54; // Maximum longitude\nconst minLat = -33.03; // Minimum latitude\nconst maxLat = -33.01; // Maximum latitude\n\nexport const addressPoints = [\n  [-71.54599734634539, -33.01803121323585, Math.floor(Math.random() * 501) + 500],\n  [-71.54465164766788, -33.01825654780948, Math.floor(Math.random() * 501) + 500],\n  [-71.54641489353811, -33.01875922833267, Math.floor(Math.random() * 501) + 500],\n  [-71.54669701287752, -33.01935061351519, Math.floor(Math.random() * 501) + 500],\n  [-71.54888343775589, -33.01018369743598, Math.floor(Math.random() * 501) + 500],\n  [-71.54652068829031, -33.01047941928122, Math.floor(Math.random() * 501) + 500],\n  [-71.5496240010213, -33.011130003849814, Math.floor(Math.random() * 501) + 500],\n  [-71.5468028076297, -33.01145529433382, Math.floor(Math.random() * 501) + 500],\n  [-71.5477902253167, -33.0105089914115, Math.floor(Math.random() * 501) + 500],\n  [-71.58026944908603, -33.02963671705373, Math.floor(Math.random() * 501) + 500],\n  [-71.5717410066938, -33.02865048394356, Math.floor(Math.random() * 501) + 500],\n  [-71.57041762770187, -33.027540958502065, Math.floor(Math.random() * 501) + 500],\n  [-71.57056466981253, -33.02803408264416, Math.floor(Math.random() * 501) + 500],\n  [-71.5713734014185, -33.02809572296883, Math.floor(Math.random() * 501) + 500],\n\n  ...Array.from({ length: 1000 }, () => [\n    Math.random() * (maxLng - minLng) + minLng, // Random longitude between minLng and maxLng\n    Math.random() * (maxLat - minLat) + minLat, // Random latitude between minLat and maxLat\n    Math.floor(Math.random() * 501) + 500 // Random value between 500 and 1000\n  ])\n];\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;AACtB,MAAMC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AACvB,MAAMC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AACvB,MAAMC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;;AAEvB,OAAO,MAAMC,aAAa,GAAG,CAC3B,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,gBAAgB,EAAE,CAAC,kBAAkB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,gBAAgB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC9E,CAAC,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC7E,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,gBAAgB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC9E,CAAC,CAAC,iBAAiB,EAAE,CAAC,kBAAkB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAChF,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAC/E,CAAC,CAAC,gBAAgB,EAAE,CAAC,iBAAiB,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAE9E,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE,MAAM,CACpCL,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIN,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;AAAE;AAC5CK,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;AAAE;AAC5CG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AAAA,CACvC,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}